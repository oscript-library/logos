//////////////////////////////////////////////////////////////////////////
//
// LOGOS: реализация логирования в стиле log4j для OneScript
//
//////////////////////////////////////////////////////////////////////////

Перем мИмяЛога;
Перем мТекущийУровень;
Перем мСпособыВывода;
Перем мСпособВыводаЗаданВручную;
Перем мУровниАппендеров;
Перем НастройкаВыводаСообщений;

Перем мИдентификатор;
Перем мРаскладкаСообщения;
Перем мВерсияAPIРаскладкиСообщения;
Перем мДополнительныеПоляЛога;
Перем мВложенныеЛоги;

Процедура ПриСозданииОбъекта(пИмяЛога)
	мИмяЛога = пИмяЛога;
КонецПроцедуры

Функция Уровень() Экспорт
	Возврат мТекущийУровень;
КонецФункции

Функция Поля(Поле1 = Неопределено, ЗначениеПоля1 = Неопределено,
			 Поле2 = Неопределено, ЗначениеПоля2 = Неопределено,
			 Поле3 = Неопределено, ЗначениеПоля3 = Неопределено,
			 Поле4 = Неопределено, ЗначениеПоля4 = Неопределено
			 ) Экспорт


	НаборПолей = Новый Соответствие();

	Если НЕ Поле1 = Неопределено Тогда
		НаборПолей.Вставить(Поле1, ЗначениеПоля1);
	КонецЕсли;
	Если НЕ Поле2 = Неопределено Тогда
		НаборПолей.Вставить(Поле2, ЗначениеПоля2);
	КонецЕсли;
	Если НЕ Поле3 = Неопределено Тогда
		НаборПолей.Вставить(Поле3, ЗначениеПоля3);
	КонецЕсли;
	Если НЕ Поле4 = Неопределено Тогда
		НаборПолей.Вставить(Поле4, ЗначениеПоля4);
	КонецЕсли;

	Возврат ПоляИз(НаборПолей);

КонецФункции

Функция ПоляИз(Знач НаборПолей, Знач КлючиИсключения = "") Экспорт

	ЛогСПолями = Новый Лог(мИмяЛога);
	ЛогСПолями.УстановитьРаскладку(мРаскладкаСообщения);
	ЛогСПолями.УстановитьУровень(мТекущийУровень);

	Если мСпособВыводаЗаданВручную Тогда
		Для каждого СпособВыбора Из мСпособыВывода Цикл

			ЛогСПолями.ДобавитьСпособВывода(СпособВыбора, мУровниАппендеров[СпособВыбора].Уровень);

		КонецЦикла;
	КонецЕсли;

	ДополнительныеПоля = Новый Соответствие();

	Если мДополнительныеПоляЛога.Количество() > 0 Тогда

		Для каждого ПолеРодителя Из мДополнительныеПоляЛога Цикл
			ДополнительныеПоля.Вставить(ПолеРодителя.Ключ, ПолеРодителя.Значение);
		КонецЦикла;

	КонецЕсли;

	МассивКлючейИсключения = ПолучитьМассивКлючейИсключения(КлючиИсключения);

	Для каждого ПолеНабора Из НаборПолей Цикл

		Если МассивКлючейИсключения.Количество() > 0
			И Не МассивКлючейИсключения.Найти(ПолеНабора.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДополнительныеПоля.Вставить(ПолеНабора.Ключ, ПолеНабора.Значение);
	КонецЦикла;

	ЛогСПолями.ДополнительныеПоля(ДополнительныеПоля);

	мВложенныеЛоги.Добавить(ЛогСПолями);

	Возврат ЛогСПолями;

КонецФункции

Функция ПолучитьМассивКлючейИсключения(Знач КлючиИсключения)

	МассивКлючей = Новый Массив();

	Если Не ЗначениеЗаполнено(КлючиИсключения) Тогда
		Возврат МассивКлючей;
	КонецЕсли;

	МассивКлючейИсключения = СтрРазделить(КлючиИсключения, ",");

	Для каждого ЭлементМассива Из МассивКлючейИсключения Цикл
		МассивКлючей.Добавить(СокрЛП(ЭлементМассива));
	КонецЦикла;

	Возврат МассивКлючей

КонецФункции

Процедура ДополнительныеПоля(пДополнительныеПоля) Экспорт
	мДополнительныеПоляЛога = пДополнительныеПоля;
КонецПроцедуры

Процедура УстановитьУровень(Знач Уровень) Экспорт
	Если Уровень < 0 Или Уровень > УровниЛога.Отключить Тогда
		ВызватьИсключение "Неверное значение аргумента 'Уровень'";
	КонецЕсли;

	мТекущийУровень = Уровень;

	МинимальныйУровень = Уровень;

	Если ЗначениеЗаполнено(мУровниАппендеров) Тогда
		Для каждого КлючЗначение Из мУровниАппендеров Цикл
			СпособВывода = КлючЗначение.Ключ;
			НастройкаСпособаВывода = КлючЗначение.Значение;
			Если Не НастройкаСпособаВывода.ЗаданЯвно Тогда
				НастройкаСпособаВывода.Уровень = Уровень;
			КонецЕсли;

			Если НастройкаСпособаВывода.Уровень < Уровень Тогда
				МинимальныйУровень = НастройкаСпособаВывода.Уровень;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	НастройкаВыводаСообщений = ЗаполнитьНастройкуВыводаСообщений(МинимальныйУровень);

	Для каждого ВложенныйЛог Из мВложенныеЛоги Цикл
		ВложенныйЛог.УстановитьУровень(Уровень);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьРаскладку(Знач Раскладка) Экспорт
	мРаскладкаСообщения = Раскладка;
	ОпределитьВерсиюAPIРаскладкиСообщения();

	Для каждого ВложенныйЛог Из мВложенныеЛоги Цикл
		ВложенныйЛог.УстановитьРаскладку(Раскладка);
	КонецЦикла;

КонецПроцедуры

Процедура Закрыть() Экспорт
	Для Каждого СпособВывода Из мСпособыВывода Цикл
		СпособВывода.Закрыть();
	КонецЦикла;
	мСпособыВывода.Очистить();
	мУровниАппендеров.Очистить();

	Для каждого ВложенныйЛог Из мВложенныеЛоги Цикл
		ВложенныйЛог.Закрыть();
	КонецЦикла;

КонецПроцедуры

// Возвращает признак ручного/собственного задания способа вывода
//
//  Возвращаемое значение:
//   Булево - Истина, если добавляли свои способы вывода, и Ложь, если не добавляли
//
Функция ДобавленыСобственныеСпособыВывода() Экспорт
	Возврат мСпособВыводаЗаданВручную;
КонецФункции

Процедура ДобавитьСпособВывода(Знач СпособВывода, Знач НовыйУровеньСпособаВывода = Неопределено) Экспорт

	Если Не мСпособВыводаЗаданВручную Тогда
		Закрыть();
		мСпособВыводаЗаданВручную = Истина;
	КонецЕсли;

	мСпособыВывода.Добавить(СпособВывода);

	Если НовыйУровеньСпособаВывода <> Неопределено Тогда
		НовыйУровень = НовыйУровеньСпособаВывода;
		ЗаданЯвно = Истина;

		НастройкаВыводаСообщений = УточнитьНастройкуВыводаСообщенийДляНовогоУровня(НовыйУровень);
	Иначе
		НовыйУровень = Уровень();
		ЗаданЯвно = Ложь;
	КонецЕсли;

	НастройкаСпособаВывода = НоваяНастройкаСпособаВывода(НовыйУровень, ЗаданЯвно);
	мУровниАппендеров[СпособВывода] = НастройкаСпособаВывода;

	ПроверитьПоддержкуAPIВывести(СпособВывода, НастройкаСпособаВывода);

	Для каждого ВложенныйЛог Из мВложенныеЛоги Цикл
		ВложенныйЛог.ДобавитьСпособВывода(СпособВывода, НовыйУровеньСпособаВывода);
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьПоддержкуAPIВывести(СпособВывода, НастройкаСпособаВывода)
	Рефлектор = Новый Рефлектор;
	Методы = Рефлектор.ПолучитьТаблицуМетодов(СпособВывода);

	МетодВывестиСобытие = Методы.Найти("ВывестиСобытие");
	Если МетодВывестиСобытие <> Неопределено Тогда
		НастройкаСпособаВывода.ВерсияAPI = 3;
		Возврат;
	КонецЕсли;

	МетодВывести = Методы.Найти("Вывести");
	Если МетодВывести <> Неопределено Тогда
		Если МетодВывести.КоличествоПараметров = 2 Тогда
			НастройкаСпособаВывода.ВерсияAPI = 2;
		Иначе
			Сообщить("Число параметров:" + МетодВывести.КоличествоПараметров);
			СпособВывода.Вывести("Метод Вывести должен иметь 2 параметра.
			|В будущих версиях logos данный способ вывода перестанет работать.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОпределитьВерсиюAPIРаскладкиСообщения()
	мВерсияAPIРаскладкиСообщения = 1;

	Рефлектор = Новый Рефлектор;
	Методы = Рефлектор.ПолучитьТаблицуМетодов(мРаскладкаСообщения);
	МетодПолучитьФорматированноеСообщение = Методы.Найти("ПолучитьФорматированноеСообщение");
	Если МетодПолучитьФорматированноеСообщение <> Неопределено Тогда
		мВерсияAPIРаскладкиСообщения = 2;
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСпособВывода(Знач СпособВывода) Экспорт

	Для Сч = 0 По мСпособыВывода.Количество()-1 Цикл
		Если мСпособыВывода[Сч] = СпособВывода Тогда
			мУровниАппендеров.Удалить(СпособВывода);
			СпособВывода.Закрыть();
			мСпособыВывода.Удалить(Сч);
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Для каждого ВложенныйЛог Из мВложенныеЛоги Цикл
		ВложенныйЛог.УдалитьСпособВывода(СпособВывода);
	КонецЦикла;

КонецПроцедуры

Функция УровеньСпособаВывода(Знач СпособВывода) Экспорт
	РезУровень = мУровниАппендеров[СпособВывода].Уровень;
	Возврат РезУровень;
КонецФункции

Функция ПолучитьИдентификатор() Экспорт
	Возврат мИдентификатор;
КонецФункции

Процедура Отладка(Знач Сообщение,
		Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	Вывести(Сообщение, УровниЛога.Отладка, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
КонецПроцедуры

Процедура Информация(Знач Сообщение,
		Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	Вывести(Сообщение, УровниЛога.Информация, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);

КонецПроцедуры

Процедура Предупреждение(Знач Сообщение,
		Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	Вывести(Сообщение, УровниЛога.Предупреждение, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);

КонецПроцедуры

Процедура Ошибка(Знач Сообщение,
		Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	Вывести(Сообщение, УровниЛога.Ошибка, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);

КонецПроцедуры

Процедура КритичнаяОшибка(Знач Сообщение,
		Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	Вывести(Сообщение, УровниЛога.КритичнаяОшибка, Параметр1,
		Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);

КонецПроцедуры

Процедура Вывести(Знач Сообщение, Знач УровеньСообщения,
		Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт

	ВыводитьСообщение = НастройкаВыводаСообщений[УровеньСообщения];

	Если Не ВыводитьСообщение Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьЗаполненныеПараметры(Параметр1, Параметр2, Параметр3,
		Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9) Тогда

		Сообщение = СтрШаблон(Сообщение, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;

	СтроительСобытияЛога = Новый СтроительСобытияЛога;
	СтроительСобытияЛога.УстановитьИмяЛога(мИмяЛога);
	СтроительСобытияЛога.УстановитьУровень(УровеньСообщения);
	СтроительСобытияЛога.УстановитьУровеньЛога(Уровень());
	СтроительСобытияЛога.УстановитьСообщение(Сообщение);
	СтроительСобытияЛога.УстановитьВремяСобытия(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтроительСобытияЛога.УстановитьДополнительныеПоля(мДополнительныеПоляЛога);

	СобытиеЛога = СтроительСобытияЛога.Создать();

	Если мВерсияAPIРаскладкиСообщения = 2 Тогда
		ВыводимоеСообщение = мРаскладкаСообщения.ПолучитьФорматированноеСообщение(СобытиеЛога);
	Иначе
		ВыводимоеСообщение = мРаскладкаСообщения.Форматировать(СобытиеЛога.ПолучитьУровень(), СобытиеЛога.ПолучитьСообщение());
	КонецЕсли;
	СобытиеЛога.УстановитьФорматированноеСообщение(ВыводимоеСообщение);

	Для Каждого СпособВывода Из мСпособыВывода Цикл
		НастройкаАппендера = мУровниАппендеров[СпособВывода];
		УровеньСпособаВывода = НастройкаАппендера.Уровень;
		Если УровеньСпособаВывода = Неопределено Или УровеньСообщения >= УровеньСпособаВывода Тогда
			Если НастройкаАппендера.ВерсияAPI = 3 Тогда
				СпособВывода.ВывестиСобытие(СобытиеЛога);
			ИначеЕсли НастройкаАппендера.ВерсияAPI = 2 Тогда
				СпособВывода.Вывести(СобытиеЛога.ПолучитьФорматированноеСообщение(), СобытиеЛога.ПолучитьУровень());
			Иначе
				СпособВывода.Вывести(СобытиеЛога.ПолучитьФорматированноеСообщение());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ЕстьЗаполненныеПараметры(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
		Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
		Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)

	Если НЕ Параметр1 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр2 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр3 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр4 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр5 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр6 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр7 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр8 = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли НЕ Параметр9 = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Процедура Инициализация()

	мВложенныеЛоги = Новый Массив();
	мИдентификатор = Новый УникальныйИдентификатор;
	мДополнительныеПоляЛога = Новый Соответствие();
	НастройкаВыводаСообщений = НоваяНастройкаВыводаСообщений();

	УстановитьУровень(УровниЛога.Информация);
	ИнициализироватьСпособыВывода();

КонецПроцедуры

Процедура ИнициализироватьСпособыВывода()

	УстановитьРаскладку(Новый ОсновнаяРаскладкаСообщения);

	мСпособВыводаЗаданВручную = Ложь;
	мСпособыВывода = Новый Массив;
	мУровниАппендеров = Новый Соответствие;

	ВыводПоУмолчанию = Новый ВыводЛогаВКонсоль();
	мСпособыВывода.Добавить(ВыводПоУмолчанию);
	НастройкаСпособаВывода = НоваяНастройкаСпособаВывода(Уровень(), Ложь);
	мУровниАппендеров[ВыводПоУмолчанию] = НастройкаСпособаВывода;

	ПроверитьПоддержкуAPIВывести(ВыводПоУмолчанию, НастройкаСпособаВывода);

КонецПроцедуры

Функция НоваяНастройкаВыводаСообщений()
	Результат = Новый Соответствие;
	Для каждого КлючЗначение Из УровниЛога.Уровни() Цикл
		Результат.Вставить(КлючЗначение.Значение, Ложь);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЗаполнитьНастройкуВыводаСообщений(Знач МинимальныйУровень)
	Результат = Новый Соответствие;
	Для каждого КлючЗначение Из НастройкаВыводаСообщений Цикл
		УровеньФильтра = КлючЗначение.Ключ;
		РазрешенВыводСообщений = УровеньФильтра >= МинимальныйУровень;
		Результат.Вставить(УровеньФильтра, РазрешенВыводСообщений);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция УточнитьНастройкуВыводаСообщенийДляНовогоУровня(Знач НовыйУровень)
	Результат = Новый Соответствие;
	Для каждого КлючЗначение Из НастройкаВыводаСообщений Цикл
		УровеньФильтра = КлючЗначение.Ключ;
		Если НовыйУровень <= УровеньФильтра Тогда
			РазрешенВыводСообщений = Истина;
		Иначе
			РазрешенВыводСообщений = КлючЗначение.Значение;
		КонецЕсли;
		Результат.Вставить(УровеньФильтра, РазрешенВыводСообщений);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция НоваяНастройкаСпособаВывода(Знач НовыйУровень, Знач ЗаданЯвно)

	НастройкаСпособаВывода = Новый Структура("Уровень, ЗаданЯвно, ВерсияAPI", НовыйУровень, ЗаданЯвно, Неопределено);
	Возврат НастройкаСпособаВывода;

КонецФункции

Инициализация();
