#использовать ".."
#Использовать asserts

Перем юТест;
Перем мСообщенияЛога;
Перем Лог;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт

	юТест = Тестирование;

	ИменаТестов = Новый Массив;

	ИменаТестов.Добавить("ТестДолжен_ПроверитьJSONРаскладкуСообщения");
	// ИменаТестов.Добавить("ТестДолжен_ПроверитьУстановкуФорматаДаты");

	Возврат ИменаТестов;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	Лог = Логирование.ПолучитьЛог("testing");
	Лог.УстановитьУровень(УровниЛога.Отладка);

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
	Лог.УдалитьСпособВывода(ЭтотОбъект);
	Логирование.ЗакрытьЛог(Лог);
	Лог = Неопределено;
	мСообщенияЛога = Неопределено;

КонецПроцедуры

Процедура ТестДолжен_ПроверитьJSONРаскладкуСообщения() Экспорт
	
	JSONРаскладкаСообщения = Новый JSONРаскладкаСообщения;
	ДобавитьСебяКакОбработчикаВывода();

	Лог.УстановитьРаскладку(JSONРаскладкаСообщения);
	Лог.Поля("prefix", "connect", "корова", 200, "адрес", "server.com")
		.Ошибка(
			"Вывод
			| ошибка
			| &ЯАмперсанд
			| <Я угловые скобки>
			| `Я одинарные кавычки`
			| \ Я слеши /"
		);
	
	ДанныеЛога = ПрочитатьJSONЛога(мСообщенияЛога[0]);

	Ожидаем.Что(ДанныеЛога["prefix"]).Равно("connect");
	Ожидаем.Что(ДанныеЛога["корова"]).Равно(200);
	Ожидаем.Что(ДанныеЛога["адрес"]).Равно("server.com");
	Ожидаем.Что(ДанныеЛога["msg"])
		.Равно(
			"Вывод
			| ошибка
			| &ЯАмперсанд
			| <Я угловые скобки>
			| `Я одинарные кавычки`
			| \ Я слеши /"
		);
	Ожидаем.Что(ДанныеЛога["level"]).Равно("ERROR");
	
КонецПроцедуры

Процедура ДобавитьСебяКакОбработчикаВывода(Знач НовыйУровень = Неопределено)
	
	мСообщенияЛога = Новый Массив;
	Лог.ДобавитьСпособВывода(ЭтотОбъект, НовыйУровень);

КонецПроцедуры

Функция ПрочитатьJSONЛога(Знач СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Данные = ПрочитатьJSON(ЧтениеJSON);

	Возврат Данные;

КонецФункции

// Выводит событие лога 
//
// Параметры:
//   СобытиеЛога - Объект - объект класса <СобытиеЛога>
//
Процедура ВывестиСобытие(Знач СобытиеЛога) Экспорт
	мСообщенияЛога.Добавить(СобытиеЛога.ПолучитьФорматированноеСообщение());
КонецПроцедуры

Процедура Закрыть() Экспорт
	мСообщенияЛога = Неопределено;
КонецПроцедуры